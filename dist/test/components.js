'use strict';

var _tape = require('tape');

var _tape2 = _interopRequireDefault(_tape);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _treemap = require('../lib/treemap/treemap');

var _treemap2 = _interopRequireDefault(_treemap);

var _table = require('../lib/table/table');

var _table2 = _interopRequireDefault(_table);

var _lineSeries = require('../lib/plot/series/line-series');

var _lineSeries2 = _interopRequireDefault(_lineSeries);

var _areaSeries = require('../lib/plot/series/area-series');

var _areaSeries2 = _interopRequireDefault(_areaSeries);

var _markSeries = require('../lib/plot/series/mark-series');

var _markSeries2 = _interopRequireDefault(_markSeries);

var _heatmapSeries = require('../lib/plot/series/heatmap-series');

var _heatmapSeries2 = _interopRequireDefault(_heatmapSeries);

var _verticalBarSeries = require('../lib/plot/series/vertical-bar-series');

var _verticalBarSeries2 = _interopRequireDefault(_verticalBarSeries);

var _horizontalBarSeries = require('../lib/plot/series/horizontal-bar-series');

var _horizontalBarSeries2 = _interopRequireDefault(_horizontalBarSeries);

var _xAxis = require('../lib/plot/x-axis');

var _xAxis2 = _interopRequireDefault(_xAxis);

var _yAxis = require('../lib/plot/y-axis');

var _yAxis2 = _interopRequireDefault(_yAxis);

var _verticalGridLines = require('../lib/plot/vertical-grid-lines');

var _verticalGridLines2 = _interopRequireDefault(_verticalGridLines);

var _horizontalGridLines = require('../lib/plot/horizontal-grid-lines');

var _horizontalGridLines2 = _interopRequireDefault(_horizontalGridLines);

var _xyPlot = require('../lib/plot/xy-plot');

var _xyPlot2 = _interopRequireDefault(_xyPlot);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

function testRenderWithProps(Component, props) {
  return (0, _tape2.default)('Rendering ' + Component.displayName, function (assert) {
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(Component, props));
    var wrapperProps = wrapper.props();
    assert.ok(wrapper.find(Component).length, Component.displayName + ' is rendered');
    Object.keys(props).forEach(function (propName) {
      assert.ok(wrapperProps[propName] === props[propName], propName + ' is set');
    });
    assert.end();
  });
}

function NOOP() {}

var TREEMAP_PROPS = { height: 100, width: 100, data: {} };

var TABLE_PROPS = {
  height: 100,
  width: 100,
  header: ['a', 'b', 'c'],
  data: [[1, 2, 3], [4, 5, 6]]
};

var XYPLOT_SERIES_PROPS = {
  xDomain: [0, 1],
  xRange: [0, 1],
  xType: 'linear',
  xDistance: 1,
  yDomain: [0, 1],
  yRange: [0, 1],
  yDistance: 1,
  yType: 'linear',
  data: [{ x: 1, y: 1 }, { x: 2, y: 2 }],
  _allData: [[{ x: 1, y: 1 }, { x: 2, y: 2 }]],
  onSeriesMouseOver: NOOP,
  onSeriesMouseOut: NOOP,
  onSeriesClick: NOOP,
  onValueMouseOver: NOOP,
  onValueMouseOut: NOOP,
  onValueClick: NOOP
};

var XYPLOT_XAXIS_PROPS = {
  xRange: [0, 1],
  xDomain: [0, 1],
  xType: 'linear'
};

var XYPLOT_YAXIS_PROPS = {
  yRange: [0, 1],
  yDomain: [0, 1],
  yType: 'linear'
};

var XYPLOT_PROPS = { width: 10, height: 10 };

testRenderWithProps(_treemap2.default, TREEMAP_PROPS);
testRenderWithProps(_table2.default, TABLE_PROPS);
testRenderWithProps(_lineSeries2.default, XYPLOT_SERIES_PROPS);
testRenderWithProps(_areaSeries2.default, XYPLOT_SERIES_PROPS);
testRenderWithProps(_markSeries2.default, XYPLOT_SERIES_PROPS);
testRenderWithProps(_verticalBarSeries2.default, XYPLOT_SERIES_PROPS);
testRenderWithProps(_horizontalBarSeries2.default, XYPLOT_SERIES_PROPS);
testRenderWithProps(_heatmapSeries2.default, XYPLOT_SERIES_PROPS);
testRenderWithProps(_xAxis2.default, XYPLOT_XAXIS_PROPS);
testRenderWithProps(_yAxis2.default, XYPLOT_YAXIS_PROPS);
testRenderWithProps(_verticalGridLines2.default, XYPLOT_XAXIS_PROPS);
testRenderWithProps(_horizontalGridLines2.default, XYPLOT_YAXIS_PROPS);
testRenderWithProps(_xyPlot2.default, XYPLOT_PROPS);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L2NvbXBvbmVudHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFvQkE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLFNBQVMsbUJBQVQsQ0FBNkIsU0FBN0IsRUFBd0MsS0FBeEMsRUFBK0M7QUFDN0MsU0FBTyxtQ0FBa0IsVUFBVSxXQUE1QixFQUEyQyxrQkFBVTtBQUMxRCxRQUFNLFVBQVUsbUJBQU0sOEJBQUMsU0FBRCxFQUFlLEtBQWYsQ0FBTixDQUFoQjtBQUNBLFFBQU0sZUFBZSxRQUFRLEtBQVIsRUFBckI7QUFDQSxXQUFPLEVBQVAsQ0FDRSxRQUFRLElBQVIsQ0FBYSxTQUFiLEVBQXdCLE1BRDFCLEVBRUssVUFBVSxXQUZmO0FBSUEsV0FBTyxJQUFQLENBQVksS0FBWixFQUFtQixPQUFuQixDQUEyQixvQkFBWTtBQUNyQyxhQUFPLEVBQVAsQ0FDRSxhQUFhLFFBQWIsTUFBMkIsTUFBTSxRQUFOLENBRDdCLEVBRUssUUFGTDtBQUdELEtBSkQ7QUFLQSxXQUFPLEdBQVA7QUFDRCxHQWJNLENBQVA7QUFjRDs7QUFFRCxTQUFTLElBQVQsR0FBZ0IsQ0FDZjs7QUFFRCxJQUFNLGdCQUFnQixFQUFDLFFBQVEsR0FBVCxFQUFjLE9BQU8sR0FBckIsRUFBMEIsTUFBTSxFQUFoQyxFQUF0Qjs7QUFFQSxJQUFNLGNBQWM7QUFDbEIsVUFBUSxHQURVO0FBRWxCLFNBQU8sR0FGVztBQUdsQixVQUFRLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLENBSFU7QUFJbEIsUUFBTSxDQUFDLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQUQsRUFBWSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUFaO0FBSlksQ0FBcEI7O0FBT0EsSUFBTSxzQkFBc0I7QUFDMUIsV0FBUyxDQUFDLENBQUQsRUFBSSxDQUFKLENBRGlCO0FBRTFCLFVBQVEsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUZrQjtBQUcxQixTQUFPLFFBSG1CO0FBSTFCLGFBQVcsQ0FKZTtBQUsxQixXQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FMaUI7QUFNMUIsVUFBUSxDQUFDLENBQUQsRUFBSSxDQUFKLENBTmtCO0FBTzFCLGFBQVcsQ0FQZTtBQVExQixTQUFPLFFBUm1CO0FBUzFCLFFBQU0sQ0FDSixFQUFDLEdBQUcsQ0FBSixFQUFPLEdBQUcsQ0FBVixFQURJLEVBRUosRUFBQyxHQUFHLENBQUosRUFBTyxHQUFHLENBQVYsRUFGSSxDQVRvQjtBQWExQixZQUFVLENBQUMsQ0FDVCxFQUFDLEdBQUcsQ0FBSixFQUFPLEdBQUcsQ0FBVixFQURTLEVBRVQsRUFBQyxHQUFHLENBQUosRUFBTyxHQUFHLENBQVYsRUFGUyxDQUFELENBYmdCO0FBaUIxQixxQkFBbUIsSUFqQk87QUFrQjFCLG9CQUFrQixJQWxCUTtBQW1CMUIsaUJBQWUsSUFuQlc7QUFvQjFCLG9CQUFrQixJQXBCUTtBQXFCMUIsbUJBQWlCLElBckJTO0FBc0IxQixnQkFBYztBQXRCWSxDQUE1Qjs7QUF5QkEsSUFBTSxxQkFBcUI7QUFDekIsVUFBUSxDQUFDLENBQUQsRUFBSSxDQUFKLENBRGlCO0FBRXpCLFdBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUZnQjtBQUd6QixTQUFPO0FBSGtCLENBQTNCOztBQU1BLElBQU0scUJBQXFCO0FBQ3pCLFVBQVEsQ0FBQyxDQUFELEVBQUksQ0FBSixDQURpQjtBQUV6QixXQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FGZ0I7QUFHekIsU0FBTztBQUhrQixDQUEzQjs7QUFNQSxJQUFNLGVBQWUsRUFBQyxPQUFPLEVBQVIsRUFBWSxRQUFRLEVBQXBCLEVBQXJCOztBQUVBLHVDQUE2QixhQUE3QjtBQUNBLHFDQUEyQixXQUEzQjtBQUNBLDBDQUFnQyxtQkFBaEM7QUFDQSwwQ0FBZ0MsbUJBQWhDO0FBQ0EsMENBQWdDLG1CQUFoQztBQUNBLGlEQUF1QyxtQkFBdkM7QUFDQSxtREFBeUMsbUJBQXpDO0FBQ0EsNkNBQW1DLG1CQUFuQztBQUNBLHFDQUFpQyxrQkFBakM7QUFDQSxxQ0FBK0Isa0JBQS9CO0FBQ0EsaURBQWtDLGtCQUFsQztBQUNBLG1EQUFvQyxrQkFBcEM7QUFDQSxzQ0FBNEIsWUFBNUIiLCJmaWxlIjoiY29tcG9uZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNiBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB0ZXN0IGZyb20gJ3RhcGUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7bW91bnR9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgVHJlZW1hcCBmcm9tICcuLi9saWIvdHJlZW1hcC90cmVlbWFwJztcbmltcG9ydCBUYWJsZSBmcm9tICcuLi9saWIvdGFibGUvdGFibGUnO1xuaW1wb3J0IExpbmVTZXJpZXMgZnJvbSAnLi4vbGliL3Bsb3Qvc2VyaWVzL2xpbmUtc2VyaWVzJztcbmltcG9ydCBBcmVhU2VyaWVzIGZyb20gJy4uL2xpYi9wbG90L3Nlcmllcy9hcmVhLXNlcmllcyc7XG5pbXBvcnQgTWFya1NlcmllcyBmcm9tICcuLi9saWIvcGxvdC9zZXJpZXMvbWFyay1zZXJpZXMnO1xuaW1wb3J0IEhlYXRtYXBTZXJpZXMgZnJvbSAnLi4vbGliL3Bsb3Qvc2VyaWVzL2hlYXRtYXAtc2VyaWVzJztcbmltcG9ydCBWZXJ0aWNhbEJhclNlcmllcyBmcm9tICcuLi9saWIvcGxvdC9zZXJpZXMvdmVydGljYWwtYmFyLXNlcmllcyc7XG5pbXBvcnQgSG9yaXpvbnRhbEJhclNlcmllcyBmcm9tICcuLi9saWIvcGxvdC9zZXJpZXMvaG9yaXpvbnRhbC1iYXItc2VyaWVzJztcbmltcG9ydCBYQXhpc0JvdHRvbSBmcm9tICcuLi9saWIvcGxvdC94LWF4aXMnO1xuaW1wb3J0IFlBeGlzTGVmdCBmcm9tICcuLi9saWIvcGxvdC95LWF4aXMnO1xuaW1wb3J0IFZlcnRpY2FsR3JpZCBmcm9tICcuLi9saWIvcGxvdC92ZXJ0aWNhbC1ncmlkLWxpbmVzJztcbmltcG9ydCBIb3Jpem9udGFsR3JpZCBmcm9tICcuLi9saWIvcGxvdC9ob3Jpem9udGFsLWdyaWQtbGluZXMnO1xuaW1wb3J0IFhZUGxvdCBmcm9tICcuLi9saWIvcGxvdC94eS1wbG90JztcblxuZnVuY3Rpb24gdGVzdFJlbmRlcldpdGhQcm9wcyhDb21wb25lbnQsIHByb3BzKSB7XG4gIHJldHVybiB0ZXN0KGBSZW5kZXJpbmcgJHtDb21wb25lbnQuZGlzcGxheU5hbWV9YCwgYXNzZXJ0ID0+IHtcbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+KTtcbiAgICBjb25zdCB3cmFwcGVyUHJvcHMgPSB3cmFwcGVyLnByb3BzKCk7XG4gICAgYXNzZXJ0Lm9rKFxuICAgICAgd3JhcHBlci5maW5kKENvbXBvbmVudCkubGVuZ3RoLFxuICAgICAgYCR7Q29tcG9uZW50LmRpc3BsYXlOYW1lfSBpcyByZW5kZXJlZGBcbiAgICApO1xuICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKHByb3BOYW1lID0+IHtcbiAgICAgIGFzc2VydC5vayhcbiAgICAgICAgd3JhcHBlclByb3BzW3Byb3BOYW1lXSA9PT0gcHJvcHNbcHJvcE5hbWVdLFxuICAgICAgICBgJHtwcm9wTmFtZX0gaXMgc2V0YCk7XG4gICAgfSk7XG4gICAgYXNzZXJ0LmVuZCgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gTk9PUCgpIHtcbn1cblxuY29uc3QgVFJFRU1BUF9QUk9QUyA9IHtoZWlnaHQ6IDEwMCwgd2lkdGg6IDEwMCwgZGF0YToge319O1xuXG5jb25zdCBUQUJMRV9QUk9QUyA9IHtcbiAgaGVpZ2h0OiAxMDAsXG4gIHdpZHRoOiAxMDAsXG4gIGhlYWRlcjogWydhJywgJ2InLCAnYyddLFxuICBkYXRhOiBbWzEsIDIsIDNdLCBbNCwgNSwgNl1dXG59O1xuXG5jb25zdCBYWVBMT1RfU0VSSUVTX1BST1BTID0ge1xuICB4RG9tYWluOiBbMCwgMV0sXG4gIHhSYW5nZTogWzAsIDFdLFxuICB4VHlwZTogJ2xpbmVhcicsXG4gIHhEaXN0YW5jZTogMSxcbiAgeURvbWFpbjogWzAsIDFdLFxuICB5UmFuZ2U6IFswLCAxXSxcbiAgeURpc3RhbmNlOiAxLFxuICB5VHlwZTogJ2xpbmVhcicsXG4gIGRhdGE6IFtcbiAgICB7eDogMSwgeTogMX0sXG4gICAge3g6IDIsIHk6IDJ9XG4gIF0sXG4gIF9hbGxEYXRhOiBbW1xuICAgIHt4OiAxLCB5OiAxfSxcbiAgICB7eDogMiwgeTogMn1cbiAgXV0sXG4gIG9uU2VyaWVzTW91c2VPdmVyOiBOT09QLFxuICBvblNlcmllc01vdXNlT3V0OiBOT09QLFxuICBvblNlcmllc0NsaWNrOiBOT09QLFxuICBvblZhbHVlTW91c2VPdmVyOiBOT09QLFxuICBvblZhbHVlTW91c2VPdXQ6IE5PT1AsXG4gIG9uVmFsdWVDbGljazogTk9PUFxufTtcblxuY29uc3QgWFlQTE9UX1hBWElTX1BST1BTID0ge1xuICB4UmFuZ2U6IFswLCAxXSxcbiAgeERvbWFpbjogWzAsIDFdLFxuICB4VHlwZTogJ2xpbmVhcidcbn07XG5cbmNvbnN0IFhZUExPVF9ZQVhJU19QUk9QUyA9IHtcbiAgeVJhbmdlOiBbMCwgMV0sXG4gIHlEb21haW46IFswLCAxXSxcbiAgeVR5cGU6ICdsaW5lYXInXG59O1xuXG5jb25zdCBYWVBMT1RfUFJPUFMgPSB7d2lkdGg6IDEwLCBoZWlnaHQ6IDEwfTtcblxudGVzdFJlbmRlcldpdGhQcm9wcyhUcmVlbWFwLCBUUkVFTUFQX1BST1BTKTtcbnRlc3RSZW5kZXJXaXRoUHJvcHMoVGFibGUsIFRBQkxFX1BST1BTKTtcbnRlc3RSZW5kZXJXaXRoUHJvcHMoTGluZVNlcmllcywgWFlQTE9UX1NFUklFU19QUk9QUyk7XG50ZXN0UmVuZGVyV2l0aFByb3BzKEFyZWFTZXJpZXMsIFhZUExPVF9TRVJJRVNfUFJPUFMpO1xudGVzdFJlbmRlcldpdGhQcm9wcyhNYXJrU2VyaWVzLCBYWVBMT1RfU0VSSUVTX1BST1BTKTtcbnRlc3RSZW5kZXJXaXRoUHJvcHMoVmVydGljYWxCYXJTZXJpZXMsIFhZUExPVF9TRVJJRVNfUFJPUFMpO1xudGVzdFJlbmRlcldpdGhQcm9wcyhIb3Jpem9udGFsQmFyU2VyaWVzLCBYWVBMT1RfU0VSSUVTX1BST1BTKTtcbnRlc3RSZW5kZXJXaXRoUHJvcHMoSGVhdG1hcFNlcmllcywgWFlQTE9UX1NFUklFU19QUk9QUyk7XG50ZXN0UmVuZGVyV2l0aFByb3BzKFhBeGlzQm90dG9tLCBYWVBMT1RfWEFYSVNfUFJPUFMpO1xudGVzdFJlbmRlcldpdGhQcm9wcyhZQXhpc0xlZnQsIFhZUExPVF9ZQVhJU19QUk9QUyk7XG50ZXN0UmVuZGVyV2l0aFByb3BzKFZlcnRpY2FsR3JpZCwgWFlQTE9UX1hBWElTX1BST1BTKTtcbnRlc3RSZW5kZXJXaXRoUHJvcHMoSG9yaXpvbnRhbEdyaWQsIFhZUExPVF9ZQVhJU19QUk9QUyk7XG50ZXN0UmVuZGVyV2l0aFByb3BzKFhZUGxvdCwgWFlQTE9UX1BST1BTKTtcbiJdfQ==